/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_HEADER_PB_H_INCLUDED
#define PB_HEADER_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Location {
    Location_GROUND_STATION = 0,
    Location_PLANE = 1,
    Location_ANY = 2
} Location;

typedef enum _Status {
    Status_READY = 0,
    Status_PADA_ARMED = 1
} Status;

/* Struct definitions */
typedef struct _Header {
    Location sender;
    Location receiver;
    int32_t packet_number;
    int64_t time;
    Status status;
} Header;


/* Helper constants for enums */
#define _Location_MIN Location_GROUND_STATION
#define _Location_MAX Location_ANY
#define _Location_ARRAYSIZE ((Location)(Location_ANY+1))

#define _Status_MIN Status_READY
#define _Status_MAX Status_PADA_ARMED
#define _Status_ARRAYSIZE ((Status)(Status_PADA_ARMED+1))


/* Initializer values for message structs */
#define Header_init_default                      {_Location_MIN, _Location_MIN, 0, 0, _Status_MIN}
#define Header_init_zero                         {_Location_MIN, _Location_MIN, 0, 0, _Status_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define Header_sender_tag                        1
#define Header_receiver_tag                      2
#define Header_packet_number_tag                 3
#define Header_time_tag                          4
#define Header_status_tag                        5

/* Struct field encoding specification for nanopb */
#define Header_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    sender,            1) \
X(a, STATIC,   SINGULAR, UENUM,    receiver,          2) \
X(a, STATIC,   SINGULAR, INT32,    packet_number,     3) \
X(a, STATIC,   SINGULAR, INT64,    time,              4) \
X(a, STATIC,   SINGULAR, UENUM,    status,            5)
#define Header_CALLBACK NULL
#define Header_DEFAULT NULL

extern const pb_msgdesc_t Header_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Header_fields &Header_msg

/* Maximum encoded size of messages (where known) */
#define Header_size                              28

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
